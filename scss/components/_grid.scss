// ==========================================================================
// Grid
// ==========================================================================

// Center Elements
.centered {
  @extend %centered;
}

// Grid

.grid__row {
  margin: 2em 0 3em 0;

  @include mquery(small) {
    @include flexy(flex, column, wrap, null, null);
    & > div {
      @include flexy(flex, column, wrap, null, null);
      }
  }
  @include mquery(medium) {
    @include flexy(flex, row, nowrap, center, flex-start);
    & > div {
      @include flexy(null, row, nowrap, space-evenly, null);
    }
  }
}

// Column themes

@each $number, $color in $color-map-grid {
  [class*="grid__col--#{$number} theme__colors"] {
    background-color: $color;
    color: $grey;
    font-weight: $font-weight--bold;
    padding: 1em;
    border-radius: 10px;
    margin: 0.25em 0;
    @include mquery(medium) {
      margin-top: 0.75em;
    }
  }
}

// Calculate grid columns
@include mquery(medium) {
  @for $i from 1 through $g-col-count {

    $context: g-context($g-col-width, $g-col-count, $g-gutter-width) !global;
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));

    // Generate column modifier classes
    .grid__col--#{$i} {
      width: percentage($target / $context);
    }
  }
}

// Column styles
[class^="grid__col--"] {

  @include mquery(medium) {
    @include doubly(percentage($g-gutter-width / $context));
    min-height: 1px;
    padding-left: 10px;
    padding-right: 10px;
    }
}

// ==========================================================================
// Grid Container
// ==========================================================================

.grid-row {
  @extend %clearfix;
  @extend %centered;
  width: 90%;

  // Make nested grid 100%
  [class*="grid__col--"] > & {
    width: 100%;
  }

  // Set a max-width for grid container
  @include mquery(medium) {
    max-width: $g-cont-max-w;
  }
}
